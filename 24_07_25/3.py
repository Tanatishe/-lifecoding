def binary_search_analysis():
    """
    ЗАДАЧА: Анализ бинарного поиска
    
    У вас есть отсортированный массив:
    arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]
    
    ВАША ЗАДАЧА:
    1. Реализовать классический бинарный поиск (найти индекс элемента)
    2. Найти первый элемент, который больше или равен заданному значению (lower_bound)
    3. Найти последний элемент, который меньше или равен заданному значению (upper_bound)
    4. Найти количество элементов в заданном диапазоне [start, end]
    5. Найти ближайший элемент к заданному значению
    6. Проверить, есть ли элемент в массиве
    7. Найти минимальный элемент в отсортированном массиве
    8. Найти максимальный элемент в отсортированном массиве
    9. Найти медиану массива
    10. Найти k-й наименьший элемент
    
    ТРЕБУЕТСЯ:
    - Алгоритм бинарного поиска
    - Работа с отсортированными массивами
    - Поиск границ и диапазонов
    - Обработка краевых случаев
    - Оптимизация алгоритмов
    
    ВЕРНУТЬ: кортеж (classic_search, lower_bound, upper_bound, range_count, closest_element, 
                     element_exists, min_element, max_element, median, kth_smallest)
    """
    
    arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]
 
 

# ТЕСТЫ
if __name__ == "__main__":
    result = binary_search_analysis()
    (target_14, target_25, lb_7, lb_10, ub_7, ub_10, 
     range_count_5_15, range_count_10_20, closest_11, closest_25,
     exists_14, exists_25, min_elem, max_elem, median, kth_5) = result
    
    # Тест 1: Проверка классического бинарного поиска
    assert target_14 == 6, f"Индекс элемента 14 должен быть 6, получено: {target_14}"
    assert target_25 == -1, f"Элемент 25 не существует, должен вернуть -1, получено: {target_25}"
    
    # Тест 2: Проверка lower_bound
    assert lb_7 == 3, f"Lower bound для 7 должен быть 3 (элемент 8), получено: {lb_7}"
    assert lb_10 == 4, f"Lower bound для 10 должен быть 4 (элемент 10), получено: {lb_10}"
    
    # Тест 3: Проверка upper_bound
    assert ub_7 == 3, f"Upper bound для 7 должен быть 3 (элемент 8), получено: {ub_7}"
    assert ub_10 == 5, f"Upper bound для 10 должен быть 5 (элемент 12), получено: {ub_10}"
    
    # Тест 4: Проверка количества элементов в диапазоне
    assert range_count_5_15 == 5, f"В диапазоне [5, 15] должно быть 5 элементов, получено: {range_count_5_15}"
    assert range_count_10_20 == 6, f"В диапазоне [10, 20] должно быть 6 элементов, получено: {range_count_10_20}"
    
    # Тест 5: Проверка ближайшего элемента
    assert closest_11 == 12, f"Ближайший к 11 должен быть 12, получено: {closest_11}"
    assert closest_25 == 24, f"Ближайший к 25 должен быть 24, получено: {closest_25}"
    
    # Тест 6: Проверка существования элементов
    assert exists_14 == True, f"Элемент 14 должен существовать, получено: {exists_14}"
    assert exists_25 == False, f"Элемент 25 не должен существовать, получено: {exists_25}"
    
    # Тест 7: Проверка минимального и максимального элементов
    assert min_elem == 2, f"Минимальный элемент должен быть 2, получено: {min_elem}"
    assert max_elem == 30, f"Максимальный элемент должен быть 30, получено: {max_elem}"
    
    # Тест 8: Проверка медианы
    assert median == 16, f"Медиана должна быть 16, получено: {median}"
    
    # Тест 9: Проверка k-го наименьшего элемента
    assert kth_5 == 10, f"5-й наименьший элемент должен быть 10, получено: {kth_5}"
    
    # Тест 10: Проверка краевых случаев
    arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]
    assert len(arr) == 15, f"Длина массива должна быть 15, получено: {len(arr)}"
    assert arr == sorted(arr), f"Массив должен быть отсортирован"
    
    print("Все тесты прошли успешно!")
    print(f"Массив: {[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]}")
    print(f"Индекс элемента 14: {target_14}")
    print(f"Индекс элемента 25 (не существует): {target_25}")
    print(f"Lower bound для 7: {lb_7} (элемент {arr[lb_7] if lb_7 < len(arr) else 'N/A'})")
    print(f"Upper bound для 10: {ub_10} (элемент {arr[ub_10] if ub_10 < len(arr) else 'N/A'})")
    print(f"Элементов в диапазоне [5, 15]: {range_count_5_15}")
    print(f"Ближайший к 11: {closest_11}")
    print(f"Ближайший к 25: {closest_25}")
    print(f"Элемент 14 существует: {exists_14}")
    print(f"Элемент 25 существует: {exists_25}")
    print(f"Минимум: {min_elem}, Максимум: {max_elem}")
    print(f"Медиана: {median}")
    print(f"5-й наименьший элемент: {kth_5}")
